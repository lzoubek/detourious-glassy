// smoke 0.4a is mostly about this rewrite of the clock. I started by
// wanting to rewrite it using lua but there was simply not enough
// support (i.e., I didn't have enough time to learn it) but the
// attempts at lua led me to a much simpler way of scrolling the clock
// cells that wouldn't be so complicated.
//
// As of smoke 0.1e, a compile-time variant to allow a 24-hour clock has
// been added. Use the following steps
//     # edje_decc ~/.e/e/themes/smoke.edc
//     # cd smoke
//     # edje_cc -DHOURS24 smoke.edc -o ~/.e/e/themes/smoke24.edj
//
// This will leave you the original smoke.edj 12-hour clock plus
// smoke24.edj 24-hour clock.

#ifndef HOURS24
#define HOUR10_CELLS "clock/clock_hour_10.png"
#else
#define HOUR10_CELLS "clock/clock_24hour_10.png"
#endif


#define DIGIT_WIDTH  0.18
#define HOUR_10_XOFF 0.0
#define HOUR_1_XOFF  0.2
#define COLON_XOFF   0.45
#define MIN_10_XOFF  0.55
#define MIN_1_XOFF   0.75

#define BASE_DESCR(IMAGE, XOFF)                 \
description { state: "default" 0.0;             \
   image.normal: IMAGE;                         \
   visible: 1;                                  \
   rel1 {                                       \
      to: "whole";                              \
      relative: XOFF 0.0;                       \
      offset: 0 0;                              \
   }                                            \
   rel2 {                                       \
      to: "whole";                              \
      relative: (XOFF+DIGIT_WIDTH) 11.0;        \
      offset: -1 -1;                            \
   }                                            \
   color: 255 255 255 0;                        \
}                                               \
description { state: "reset" 0.0;               \
   inherit: "default" 0.0;                      \
   color: 255 255 255 255;                      \
}

#define DIGIT_DESCR(IDX, X)                             \
description { state: "digit" IDX;                       \
   inherit: "default" 0.0;                              \
   rel1 {                                               \
      relative: X (-10.0*IDX)-1.0;                      \
      offset: 0 0;                                      \
   }                                                    \
   rel2 {                                               \
      relative: (X+DIGIT_WIDTH) (-10.0*IDX)+10.0;       \
      offset: -1 -1;                                    \
   }                                                    \
   color: 255 255 255 255;                              \
}

// This sets the digit transition type and length
#define DIGITRANS SINUSOIDAL 1

#define CELL_TRANS(NAME,IDX,TARGET)             \
   program { name: NAME;                        \
   action: STATE_SET "digit" IDX;               \
   transition: DIGITRANS;                       \
   target: TARGET;                              \
}

#define HOUR_10_TRANS(NAME,IDX) CELL_TRANS(NAME,IDX,"hour_10")
#define HOUR_1_TRANS(NAME,IDX) CELL_TRANS(NAME,IDX,"hour_1")
#define MINUTE_10_TRANS(NAME,IDX) CELL_TRANS(NAME,IDX,"min_10")
#define MINUTE_1_TRANS(NAME,IDX) CELL_TRANS(NAME,IDX,"min_1")

group { name: "e/modules/clock/main";

   script {
      public cur_hour_;
      public m_10_;
      public clock_cb(unused) {
         new year, month, day, yearday, weekday, hour, minute;
         new Float:second;
         new h;
         new m_mod, m_tmp;

         date(year, month, day, yearday, weekday, hour, minute, second);

         // It is my preference not to have a second hand so the
         // the timer is set to go off at the top of the minute.
         timer(61.0 - second, "clock_cb", 1);

         h = get_int(cur_hour_)
         if (hour != h) {
            set_int(cur_hour_, hour);
#ifndef HOURS24
            if (hour > 12) hour = hour - 12;
            if (hour == 0) hour = 12;
#endif
            new htmp = hour / 10;
            if (htmp == 0)      run_program(PROGRAM:"hour_10_0");
            else if (htmp == 1) run_program(PROGRAM:"hour_10_1");
            else if (htmp == 2) run_program(PROGRAM:"hour_10_2");

            //
            htmp = hour % 10;
            if (htmp == 0)      run_program(PROGRAM:"hour_1_0");
            else if (htmp == 1) run_program(PROGRAM:"hour_1_1");
            else if (htmp == 2) run_program(PROGRAM:"hour_1_2");
            else if (htmp == 3) run_program(PROGRAM:"hour_1_3");
            else if (htmp == 4) run_program(PROGRAM:"hour_1_4");
            else if (htmp == 5) run_program(PROGRAM:"hour_1_5");
            else if (htmp == 6) run_program(PROGRAM:"hour_1_6");
            else if (htmp == 7) run_program(PROGRAM:"hour_1_7");
            else if (htmp == 8) run_program(PROGRAM:"hour_1_8");
            else if (htmp == 9) run_program(PROGRAM:"hour_1_9");
         }

         m_mod = minute % 10;
         m_tmp = (minute - m_mod) / 10;
         if (m_10_ != m_tmp) {
            m_10_ = m_tmp;
            // value from 0-5
            if (m_10_ == 0)      run_program(PROGRAM:"min_10_0");
            else if (m_10_ == 1) run_program(PROGRAM:"min_10_1");
            else if (m_10_ == 2) run_program(PROGRAM:"min_10_2");
            else if (m_10_ == 3) run_program(PROGRAM:"min_10_3");
            else if (m_10_ == 4) run_program(PROGRAM:"min_10_4");
            else if (m_10_ == 5) run_program(PROGRAM:"min_10_5");
         }
         // minutes digit is 0 .. 9
         if (m_mod == 0)      run_program(PROGRAM:"min_1_0");
         else if (m_mod == 1) run_program(PROGRAM:"min_1_1");
         else if (m_mod == 2) run_program(PROGRAM:"min_1_2");
         else if (m_mod == 3) run_program(PROGRAM:"min_1_3");
         else if (m_mod == 4) run_program(PROGRAM:"min_1_4");
         else if (m_mod == 5) run_program(PROGRAM:"min_1_5");
         else if (m_mod == 6) run_program(PROGRAM:"min_1_6");
         else if (m_mod == 7) run_program(PROGRAM:"min_1_7");
         else if (m_mod == 8) run_program(PROGRAM:"min_1_8");
         else if (m_mod == 9) run_program(PROGRAM:"min_1_9");
      }
   }
   parts {
      part { name: "whole";
         type: RECT;
         mouse_events: 1;
         description {
            state: "default" 0.0;
            color: 255 255 255 0;
            rel1 {
               relative: 0.0 0.1;
               offset: 0 0;
            }
            rel2 {
               relative: 1.0 0.9;
               offset: -1 -1;
            }
         }
      }
      part { name: "clipper";
         type: RECT;
         mouse_events: 0;
         description {
            rel1 {
               to: "whole";
               relative: 0.0 0.0;
               offset: 0 0;
            }
            rel2 {
               to: "whole";
               relative: 1.0 1.0;
               offset: -1 -1;
            }
         }
      }
      part { name: "hour_10";
         type: IMAGE;
         clip_to: "clipper";
         BASE_DESCR(HOUR10_CELLS, HOUR_10_XOFF);
         DIGIT_DESCR(0.0, HOUR_10_XOFF);
         DIGIT_DESCR(0.1, HOUR_10_XOFF);
         DIGIT_DESCR(0.2, HOUR_10_XOFF); /* only used in 24-hour clock */
      }
      part { name: "hour_1";
         type: IMAGE;
         clip_to: "clipper";
         BASE_DESCR("clock/clock_hour_1.png", HOUR_1_XOFF);
         DIGIT_DESCR(0.0, HOUR_1_XOFF);
         DIGIT_DESCR(0.1, HOUR_1_XOFF);
         DIGIT_DESCR(0.2, HOUR_1_XOFF);
         DIGIT_DESCR(0.3, HOUR_1_XOFF);
         DIGIT_DESCR(0.4, HOUR_1_XOFF);
         DIGIT_DESCR(0.5, HOUR_1_XOFF);
         DIGIT_DESCR(0.6, HOUR_1_XOFF);
         DIGIT_DESCR(0.7, HOUR_1_XOFF);
         DIGIT_DESCR(0.8, HOUR_1_XOFF);
         DIGIT_DESCR(0.9, HOUR_1_XOFF);
      }
      part { name: "colon";
         type: IMAGE;
         clip_to: "clipper";
         description {
            state: "default" 0.0;
            image.normal: "clock/colon.png";
            visible: 1;
            rel1 {
               to: "whole";
               relative: COLON_XOFF 0.0;
               offset: 0 -2;
            }
            rel2 {
               to: "whole";
               relative: (COLON_XOFF+.1) 1.0;
               offset: -1 -6;
            }
            color: 255 255 255 255;
         }
      }
      part { name: "min_10";
         type: IMAGE;
         clip_to: "clipper";
         BASE_DESCR("clock/clock_min_10.png", MIN_10_XOFF);
         DIGIT_DESCR(0.0, MIN_10_XOFF);
         DIGIT_DESCR(0.1, MIN_10_XOFF);
         DIGIT_DESCR(0.2, MIN_10_XOFF);
         DIGIT_DESCR(0.3, MIN_10_XOFF);
         DIGIT_DESCR(0.4, MIN_10_XOFF);
         DIGIT_DESCR(0.5, MIN_10_XOFF);
      }

      part { name: "min_1";
         type: IMAGE;
         clip_to: "clipper";
         BASE_DESCR("clock/clock_min_1.png", MIN_1_XOFF);
         DIGIT_DESCR(0.0, MIN_1_XOFF);
         DIGIT_DESCR(0.1, MIN_1_XOFF);
         DIGIT_DESCR(0.2, MIN_1_XOFF);
         DIGIT_DESCR(0.3, MIN_1_XOFF);
         DIGIT_DESCR(0.4, MIN_1_XOFF);
         DIGIT_DESCR(0.5, MIN_1_XOFF);
         DIGIT_DESCR(0.6, MIN_1_XOFF);
         DIGIT_DESCR(0.7, MIN_1_XOFF);
         DIGIT_DESCR(0.8, MIN_1_XOFF);
         DIGIT_DESCR(0.9, MIN_1_XOFF);
      }

      part { name: "main";
         type: RECT;
         mouse_events: 1;
         description {
            state: "default" 0.0;
            rel1 {
               to: "whole";
               relative: 0.0 0.0;
               offset: 0 2;
            }
            rel2 {
               to: "whole";
               relative: 1.0 1.0;
               offset: -1 -2;
            }
            color: 255 255 255 0;
         }
      }
   }

   programs {
      program { name: "init";
         signal: "load";
         source: "";
         script {
            set_int(cur_hour_,-1);
            set_int(m_10_,-1);
            clock_cb(0);
         }
      }

      /* Each transition happens in a similar manner. The only quirk
       * is that on a transition to 0 a transition to "reset" is made
       * before the actual change so that rolling always goes the same
       * direction. (It would be simpler and still work if I didn't do
       * this, but it looks odd on minute transitions like 19->20
       * where '1' would roll one way to '2' and '9' would roll
       * backwards to '0'.)
       */

      /* The tens of hours transitions */
      program { name: "hour_10_0";
         action: STATE_SET "reset" 0.0;
         target: "hour_10";
         after: "hour_10_to_zero";
      }
      program { name: "hour_10_to_zero";
         action: STATE_SET "digit" 0.0;
         transition: DIGITRANS;
         target: "hour_10";
      }
      HOUR_10_TRANS("hour_10_1", 0.1);
      HOUR_10_TRANS("hour_10_2", 0.2); /* only used in 24-hour clock */

      /* The hours transitions */

      program { name: "hour_1_0";
         action: STATE_SET "reset" 0.0;
         target: "hour_1";
         after: "hour_1_to_zero";
      }
      program { name: "hour_1_to_zero";
         action: STATE_SET "digit" 0.0;
         transition: DIGITRANS;
         target: "hour_1";
      }
      HOUR_1_TRANS("hour_1_1", 0.1);
      HOUR_1_TRANS("hour_1_2", 0.2);
      HOUR_1_TRANS("hour_1_3", 0.3);
      HOUR_1_TRANS("hour_1_4", 0.4);
      HOUR_1_TRANS("hour_1_5", 0.5);
      HOUR_1_TRANS("hour_1_6", 0.6);
      HOUR_1_TRANS("hour_1_7", 0.7);
      HOUR_1_TRANS("hour_1_8", 0.8);
      HOUR_1_TRANS("hour_1_9", 0.9);

      /* The tens of minutes transitions */

      program { name: "min_10_0";
         action: STATE_SET "reset" 0.0;
         target: "min_10";
         after: "min_10_to_zero";
      }
      program { name: "min_10_to_zero";
         action: STATE_SET "digit" 0.0;
         transition: DIGITRANS;
         target: "min_10";
      }
      MINUTE_10_TRANS("min_10_1", 0.1);
      MINUTE_10_TRANS("min_10_2", 0.2);
      MINUTE_10_TRANS("min_10_3", 0.3);
      MINUTE_10_TRANS("min_10_4", 0.4);
      MINUTE_10_TRANS("min_10_5", 0.5);

      /* The minute transitions */

      program { name: "min_1_0";
         action: STATE_SET "reset" 0.0;
         target: "min_1";
         after: "min_1_to_zero";
      }
      program { name: "min_1_to_zero";
         action: STATE_SET "digit" 0.0;
         transition: DIGITRANS;
         target: "min_1";
      }
      /* */
      MINUTE_1_TRANS("min_1_1", 0.1);
      MINUTE_1_TRANS("min_1_2", 0.2);
      MINUTE_1_TRANS("min_1_3", 0.3);
      MINUTE_1_TRANS("min_1_4", 0.4);
      MINUTE_1_TRANS("min_1_5", 0.5);
      MINUTE_1_TRANS("min_1_6", 0.6);
      MINUTE_1_TRANS("min_1_7", 0.7);
      MINUTE_1_TRANS("min_1_8", 0.8);
      MINUTE_1_TRANS("min_1_9", 0.9);
   }
}

